"use client"
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.15 scene.gltf ./ -t 
Author: assetfactory (https://sketchfab.com/assetfactory)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/sci-fi-computer-game-ready-53e7eeb0f69540d2892ad6aa5f47bd39
Title: Sci - fi computer game ready
*/

import * as THREE from 'three'
import { useEffect, useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { motion } from "framer-motion-3d";
import { gsap } from "gsap";

type GLTFResult = GLTF & {
  nodes: {
    Plane002_digital_displays_0: THREE.Mesh
    Plane002_digital_display_sides_0: THREE.Mesh
    Plane001_digital_displays_0: THREE.Mesh
    Plane001_digital_display_sides_0: THREE.Mesh
    Circle_metal_2_0: THREE.Mesh
    Circle_metal_1_0: THREE.Mesh
  }
  materials: {
    digital_displays: THREE.MeshStandardMaterial
    digital_display_sides: THREE.MeshStandardMaterial
    metal_2: THREE.MeshStandardMaterial
    metal_1: THREE.MeshStandardMaterial
  }
}

export type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export default function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/scene.gltf') as GLTFResult
  const ref = useRef<THREE.Group<THREE.Object3DEventMap>>()
  useEffect(() => {
    if (ref.current !== undefined) {
      const tl = gsap.timeline()
      tl.to(ref.current.position, { x: 3, z: 2.7, duration: .8 })
      tl.to(ref.current.rotation, { y: -1, duration: 1.2 })
    }
  }, [])
  return (
    // @ts-ignore
    <group ref={ref} {...props} dispose={null}>
      <motion.group
        scale={0.01}>
        <motion.group
          // @ts-ignore
          initial={{
            x: 0,
            y: 0,
            z: 0,
            rotateX: 1.5,
            scale: 0
          }}
          animate={{
            x: 0,
            y: 28.869,
            z: 312.193,
            rotateX: -1.469,
            scale: 100
          }}
          transition={{
            delay: .6,
            duration: 2,
            damping: true
          }}
        //  position={[0, 28.869, 312.193]}
        // rotation={[-1.469, 0, 0]} 
        // scale={100}
        >
          <mesh geometry={nodes.Plane002_digital_displays_0.geometry} material={materials.digital_displays} />
          <mesh geometry={nodes.Plane002_digital_display_sides_0.geometry} material={materials.digital_display_sides} />
        </motion.group>
        <motion.group
          // @ts-ignore

          initial={{
            x: 0,
            y: 0,
            z: 0
          }}
          animate={{
            x: 0,
            y: 381.812,
            z: -82.657
          }}
          transition={{
            delay: .6,
            duration: .7,
            damping: true
          }}
          // position={[0, 381.812, -82.657]}
          rotation={[-0.229, 0, 0]} scale={100}>
          <mesh geometry={nodes.Plane001_digital_displays_0.geometry} material={materials.digital_displays} />
          <mesh geometry={nodes.Plane001_digital_display_sides_0.geometry} material={materials.digital_display_sides} />
        </motion.group>
        <motion.group
          // @ts-ignore
          initial={{
            x: 125,
            y: 100,
            z: 0
          }}
          animate={{
            x: 0,
            y: 0,
            z: -94.762
          }}
          transition={{
            delay: .6,
            duration: .7,
            damping: true
          }}
          //  position={[0, 0, -94.762]}
          rotation={[0, Math.PI / 2, 0]} scale={123.801}>
          <mesh geometry={nodes.Circle_metal_2_0.geometry} material={materials.metal_2} />
          <mesh geometry={nodes.Circle_metal_1_0.geometry} material={materials.metal_1} />
        </motion.group>
      </motion.group>
    </group>
  )
}

useGLTF.preload('/scene.gltf')
